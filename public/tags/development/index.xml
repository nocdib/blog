<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on Bits, Rhymes and Life</title>
    <link>http://blog.nocdib.com/tags/development/</link>
    <description>Recent content in Development on Bits, Rhymes and Life</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 25 Apr 2016 06:13:52 -0400</lastBuildDate>
    <atom:link href="http://blog.nocdib.com/tags/development/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>If You Use Vagrant Then You Should Give Otto a Try</title>
      <link>http://blog.nocdib.com/If-you-use-Vagrant-then-you-should-be-using-Otto/</link>
      <pubDate>Mon, 25 Apr 2016 06:13:52 -0400</pubDate>
      
      <guid>http://blog.nocdib.com/If-you-use-Vagrant-then-you-should-be-using-Otto/</guid>
      <description>&lt;p&gt;I was first introduced to &lt;a href=&#34;https://www.vagrantup.com/&#34;&gt;Vagrant&lt;/a&gt; while working on a backend development project last year. If you aren&amp;rsquo;t familiar with Vagrant it&amp;rsquo;s basically a configuration wrapper around your preferred virtual machine software that permits you to customize the setup of a VM using a text file called Vagrantfile along with any desired  provisioning files (Chef, Salt, Ansible). Since the configuration is managed with text files it&amp;rsquo;s easy to make changes without manually removing and installing software on the VM and the settings are easily shareable among different users using version control. The alternatives would be to either manually configure a VM and distribute the large image file or to develop the application on individual workstations. With the latter you are bound to encounter the issue of inconsistent behavior due to variances in machine setups among the team. Vagrant is  mature and has been widely adopted by the tech industry, so much so that it spawned &lt;a href=&#34;http://www.hashicorp.com&#34;&gt;a company&lt;/a&gt; that focuses on open source and commercial dev ops software offerings. I&amp;rsquo;m not sure whether it was deliberate or consequential but each of the products after Vagrant were interoperable and formed a suite of distributed systems management solutions. In a clever and resourceful move, Hashicorp combined the VM management of Vagrant with some of their other offerings into a single solution that not only allows you to develop your standalone applications but also to deploy them to the cloud without ever needing to leave your command-line. This all-in-one solution is called &lt;a href=&#34;https://www.hashicorp.com/blog/otto.html&#34;&gt;Otto.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Otto&amp;rsquo;s level of automation is steps beyond what even Vagrant does to the point where it can detect the file types of an existing project and automatically configure a development environment for it. For example, run the &amp;ldquo;otto compile&amp;rdquo; command in a folder with Golang .go source files and you get an environment that already has a Gopath configured to the directory  the command was run from. For building workstation environments Otto leverages Vagrant under the hood. If you only need it for local development then you can use it for just that. Want to deploy your project to Amazon Web Services? Otto will automatically download &lt;a href=&#34;http://www.packer.io/&#34;&gt;Packer&lt;/a&gt; to build your desired image and then use &lt;a href=&#34;http://www.terraform.io&#34;&gt;Terraform&lt;/a&gt; to deploy it without you having to touch the AWS console.&lt;/p&gt;

&lt;p&gt;Otto is in the early zero-point version stages so it&amp;rsquo;s probably a good idea to give it some more time before implementing it in a mission-critical production setting. If you are on a small team that can afford to audit new technology then Otto is well worth it. For my personal project use it&amp;rsquo;s more than sufficient so I&amp;rsquo;ve decided to stick with it instead of standalone Vagrant because it&amp;rsquo;s bound to be the full successor by the time it&amp;rsquo;s production certified.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;&lt;b&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;&lt;/b&gt; This is an honest and unbiased assessment. I am in no way affiliated with Hashicorp or its employees. I did meet &lt;a href=&#34;http://twitter.com/mitchellh&#34;&gt;Mitchell Hashimoto&lt;/a&gt; once, though.&lt;/i&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learning How To Learn Part 1: Choosing The Proper Resources</title>
      <link>http://blog.nocdib.com/Learning-How-To-Learn-Part-1/</link>
      <pubDate>Mon, 11 Apr 2016 13:32:10 -0400</pubDate>
      
      <guid>http://blog.nocdib.com/Learning-How-To-Learn-Part-1/</guid>
      <description>&lt;p&gt;For most of my life I had conflated the word &amp;ldquo;learn&amp;rdquo; with the word &amp;ldquo;memorize.&amp;rdquo; Sadly, I think that the American education system is responsible for this because, for as long as I could remember, memorizing information was given precedence over actually understanding what was taught. The only subject that defied this convention was Mathematics which also happened to be the subject I liked the least. The problem with only memorizing atomic facts of information is that while you may be able to recall information accurately enough to get the correct answer on a test you overlook the importance of personally interpreting the information and making connections with other bits of information. The more I work with graph databases (Neo4j in particular) is the more I see the real-life applications of connected information, data.&lt;br/&gt;
&lt;br/&gt;
&amp;ldquo;Information&amp;rdquo; and &amp;ldquo;data&amp;rdquo; are two more words that are often wrongfully used synonymously but I don&amp;rsquo;t intend to go into detail on commonly misused English words. When it comes to learning I am actually still &lt;i&gt;&lt;u&gt;learning&lt;/u&gt;&lt;/i&gt; how to do it in the best way for myself. I compare it to any skill where there are a core set of basic principles that the individual develops their own personal style from. Right now, I&amp;rsquo;m refining my personal style of learning to achieve the result of gaining understanding, efficiently.&lt;br/&gt;
&lt;br/&gt;
Terms like &amp;ldquo;visual learner&amp;rdquo; have crept into the American scholastic vocabulary over the last decade but they didn&amp;rsquo;t exist when I was going to school. I&amp;rsquo;ve come to see that although I can function well with traditional learning methods I actually learn quicker with aided instruction. In other words, I can read material and teach myself something, however, I progress more quickly through visually-aided learning. In an age where streaming online video is pervasive I&amp;rsquo;m sure this style of learning has helped many more folks other than myself. Something about didactic engagement, whether it&amp;rsquo;s real-time or asynchronous, resonates well with me but I realize that the method of teaching is only as effective as the resource conveying the information.&lt;br/&gt;
&lt;br/&gt;
Last year I paid for &lt;a href=&#34;https://fedora.bitfountain.io/courses/android&#34;&gt;a self-paced online course&lt;/a&gt; that taught Android development. I had never found a book on the subject that worked well with me nor had I found any of the online tutorials, even ones from Google, helpful past the initial stages. As a result, I had for a long time dismissed Android development as something that was hard to learn and not worth my time. Apple iOS development, on the other hand, had a variety of written resources that were easier for me to understand and become quickly productive with. When I started the Android course it was informative and I thought I was progressing well but several hours into it I came to realize that it had gone from explaining concepts to basically saying &amp;ldquo;enter this code to see this happen.&amp;rdquo; At the beginning I was taking notes but for several of the videos I hadn&amp;rsquo;t taken a single note because I hadn&amp;rsquo;t learned anything. You can tell anyone how to enter some code and run a command to make the computer display &amp;ldquo;hello, world&amp;rdquo; but if you don&amp;rsquo;t explain the mechanics behind what is going on then the student hasn&amp;rsquo;t learned why what they are doing provides the end result. The course, like most resources on computer programming ended up being like this:&lt;br/&gt;
&lt;br/&gt;
&lt;img src=&#34;http://blog.nocdib.com/blog_images/owl.jpg&#34;&gt;
&lt;br/&gt;
Choosing resources that compliment your style of learning is crucial. Not everything will work for everyone. I can&amp;rsquo;t say that the course wouldn&amp;rsquo;t be beneficial to anyone because someone could compensate for the lack of explanation with their own research and gain understanding that way but I simply don&amp;rsquo;t have the time to be presented with information that I have to research just to understand it. I require a resource that explains the what and the why in enough detail so that I can apply it independently and then do any requisite research, if necessary. This is why there are scores of books written on any given subject. Whether it&amp;rsquo;s teaching calculus, basket-weaving, origami, etc. the intention of any instructional text is the same but each one may not work the same way with everyone&amp;rsquo;s style of learning and level of understanding. I used to wonder why many major book stores often include cafes where you could read books before buying them and even had lenient refund policies where you could return a book within a timeframe that you could actually finish reading it. Now I know why. Auditing your resources is important. Committing to anything for the purpose of learning should be treated like an interpersonal relationship but with an inanimate object. When you find something you like you should get to know it and see if it could be right for you. If there is strong potential that it will give you what you need then you could fully commit to it but if it doesn&amp;rsquo;t meet your expectations it&amp;rsquo;s best to end things quickly so as not to waste your time. Ultimately, the relationship you have with learning is one that you have with yourself so it&amp;rsquo;s alright to be selfish because you are the only entity reaping any reward from the endeavor.&lt;br/&gt;
&lt;br/&gt;
&lt;i&gt;&lt;b&gt;P.S.&lt;/b&gt; All was not lost on my Android development journey. As fate would have it, Google has put out a series of &lt;a href=&#34;https://www.udacity.com/courses/android&#34;&gt;free instructional videos&lt;/a&gt; through Udacity on Android development for beginner, intermediate and advanced levels. There is also an accredited course where, upon completion, you earn a Google &amp;ldquo;nanodegree&amp;rdquo; in Android development. The degree course has a monthly tuition. I can say that the free-tier was what I was looking for all along and hopefully later this year I&amp;rsquo;ll pursue the nanodegree option.&lt;/i&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Best Golang Tutorial Around</title>
      <link>http://blog.nocdib.com/The-best-golang-tutorial-around/</link>
      <pubDate>Fri, 25 Mar 2016 13:21:51 -0400</pubDate>
      
      <guid>http://blog.nocdib.com/The-best-golang-tutorial-around/</guid>
      <description>&lt;p&gt;&lt;i&gt;TL;DR: Read &lt;a href=&#34;http://www.golangbootcamp.com/book&#34; target=&#34;_new&#34;&gt;this tutorial&lt;/a&gt; and watch &lt;a href=&#34;https://www.udemy.com/learn-how-to-code/learn/v4/content&#34; target=&#34;_new&#34;&gt;these videos&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;Golang, also known as Go, has been gaining traction in recent years as a mainstream programming language, particularly in the space of web services. At a time when dynamically-typed, interpreted languages like Python and Ruby are dominating that arena while the frameworks that are built with them are handling front-end content or REST API calls I found it interesting that a statically-typed, compiled language had a growing buzz around it. Back in Spring 2012, after I had just ended a job that made heavy use of Erlang I remember my cousin&amp;rsquo;s husband mentioning his interest in learning Go. Having just dealt with a niche language like Erlang&amp;ndash;which I found to be unpleasant&amp;ndash;I wasn&amp;rsquo;t interested in even hearing about another programming language that hadn&amp;rsquo;t been widely adopted.&lt;/p&gt;

&lt;p&gt;In the middle of 2014 &lt;a href=&#34;http://nickmanning.net/&#34; target=&#34;_new&#34;&gt;Nick Manning&lt;/a&gt; started the &lt;a href=&#34;http://www.meetup.com/nycgolang/&#34; target=&#34;_new&#34;&gt;Golang NYC meetup group&lt;/a&gt; and I began attending since I already knew him from the &lt;a href=&#34;http://www.meetup.com/nycneo4j/&#34; target=&#34;_new&#34;&gt;NYC Neo4j meetup group&lt;/a&gt;. Hearing the testimonials of Go converts piqued my interest but one meeting in particular made me want to try the language for myself. &lt;a href=&#34;http://www.bjornroche.com/&#34; target=&#34;_new&#34;&gt;Bjorn Roche&lt;/a&gt; gave a presentation about using the &lt;a href=&#34;https://revel.github.io/&#34; target=&#34;_new&#34;&gt;Revel web framework&lt;/a&gt; to power the backend of the mobile app &lt;a href=&#34;https://www.shimmeo.com/&#34; target=&#34;_new&#34;&gt;Shimmeo&lt;/a&gt;. During the presentation he compared Revel to the Java/Scala web framework &lt;a href=&#34;http://www.playframework.com&#34; target=&#34;_new&#34;&gt;Play&lt;/a&gt;. I had a strong interest in Play and was about to use it on my own personal project but after hearing that there was a Go equivalent I was convinced to give Go and Revel a try. Nothing helps you learn a new language better than actually implementing something with it.&lt;/p&gt;

&lt;p&gt;My first step was to learn Go. I&amp;rsquo;m pretty particular with my learning materials and I&amp;rsquo;m just not the type who becomes proficient from online documentation and web searches alone. Finding the right introductory material wasn&amp;rsquo;t easy since there was a dearth of tutorials and well-written, published books on Go. I had found one e-book, whose name I will not mention, but I found its explanation and the progression of material to be deficient. By chance I had stumbled upon one of &lt;a href=&#34;https://www.youtube.com/user/toddmcleod&#34; target=&#34;_new&#34;&gt;Todd Mcleod&amp;rsquo;s&lt;/a&gt; YouTube videos and left a comment. He quickly responded and suggested that I take a look at a new Golang video course that he recently published on &lt;a href=&#34;https://www.udemy.com/learn-how-to-code/learn/v4/content&#34; target=&#34;_new&#34;&gt;Udemy&lt;/a&gt;. I bought access to the videos for a nominal fee and it was the best investment in programming-related material that I have ever made. Simply put, if you have prior computer programming experience there is no way that you couldn&amp;rsquo;t become proficient with Go by the end of the course. While doing the course I had also come across Matt Aimonetti&amp;rsquo;s e-book &lt;a href=&#34;http://www.golangbootcamp.com/book&#34; target=&#34;_new&#34;&gt;Go Bootcamp&lt;/a&gt; and noticed that Todd McLeod&amp;rsquo;s course actually elaborated on many of those examples.&lt;/p&gt;

&lt;p&gt;If you are interested in learning Go and are looking for a tutorial that blends brevity with comprehensiveness then I suggest reading &lt;a href=&#34;http://www.golangbootcamp.com/book&#34; target=&#34;_new&#34;&gt;Go Bootcamp&lt;/a&gt;. If you need greater depth then look at &lt;a href=&#34;https://www.udemy.com/learn-how-to-code/learn/v4/content&#34; target=&#34;_new&#34;&gt;Todd&amp;rsquo;s video course on Udemy&lt;/a&gt;. After tackling the language with these resources I actually found it better to create my own REST API without using a framework. Go is a powerful language that allows you to do just that without a lot of overhead.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Journey Of A Thousand Miles Begins With A Leap</title>
      <link>http://blog.nocdib.com/A-journey-of-a-thousand-miles-begins-with-a-leap/</link>
      <pubDate>Mon, 29 Feb 2016 20:07:14 -0400</pubDate>
      
      <guid>http://blog.nocdib.com/A-journey-of-a-thousand-miles-begins-with-a-leap/</guid>
      <description>&lt;p&gt;It’s been a long time coming (about 6 years) but I’ve finally settled on an idea for a mobile development project to invest my time into. Two years of that time was spent selecting an idea that wasn’t already at least partially implemented, another two years was spent getting acclimated with the tech scene well enough to know which direction to go with it and another two years was was spent dealing with life in general along with general laziness. I&amp;rsquo;ve been gainfully employed for the entire time so it&amp;rsquo;s not as though this project was something that I thought about daily. Now is just the time that I decided to double-down and actually get serious about building something tangible. I have high hopes for my idea so I figured that I will chronicle my progress. If nobody ever reads this it will still be my personal record of the steps I made towards accomplishing something that I&amp;rsquo;ve been dreaming about.&lt;/p&gt;

&lt;p&gt;All posts related to this project will be prefaced with &amp;ldquo;YB.&amp;rdquo; I don&amp;rsquo;t want to mention specifics about what the app will do but I will say that it is mobile-first, socially-based and has heavy emphasis on geolocation. I will be developing the full stack on my own using technologies that I am learning along the way. Hopefully this will become the resource that I wish I found back in the Summer of 2009 to help me get started. If I could minimize the time needed for someone to undertake their own project then I’d be more than satisfied. While I don’t believe in numerology, astrology or any other form of time/numeric-based omens I can’t help but think that today being &lt;a href=&#34;https://en.wikipedia.org/wiki/Leap_year#Leap_day&#34;&gt;Leap Day&lt;/a&gt; is psuedo-symbolic since I’m going forward to embark on this personal quest. Well, here goes nothing.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>