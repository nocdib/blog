<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tech on Bits, Rhymes and Life</title>
    <link>http://blog.nocdib.com/categories/tech/</link>
    <description>Recent content in Tech on Bits, Rhymes and Life</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 25 Mar 2016 13:21:51 -0400</lastBuildDate>
    <atom:link href="http://blog.nocdib.com/categories/tech/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The Best Golang Tutorial Around</title>
      <link>http://blog.nocdib.com/The-best-golang-tutorial-around/</link>
      <pubDate>Fri, 25 Mar 2016 13:21:51 -0400</pubDate>
      
      <guid>http://blog.nocdib.com/The-best-golang-tutorial-around/</guid>
      <description>&lt;p&gt;&lt;i&gt;TL;DR: Read &lt;a href=&#34;http://www.golangbootcamp.com/book&#34; target=&#34;_new&#34;&gt;this tutorial&lt;/a&gt; and watch &lt;a href=&#34;https://www.udemy.com/learn-how-to-code/learn/v4/content&#34; target=&#34;_new&#34;&gt;these videos&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;Golang, also known as Go, has been gaining traction in recent years as a mainstream programming language, particularly in the space of web services. At a time when dynamically-typed, interpreted languages like Python and Ruby are dominating that arena while the frameworks that are built with them are handling front-end content or REST API calls I found it interesting that a statically-typed, compiled language had a growing buzz around it. Back in Spring 2012, after I had just ended a job that made heavy use of Erlang I remember my cousin&amp;rsquo;s husband mentioning his interest in learning Go. Having just dealt with a niche language like Erlang&amp;ndash;which I found to be unpleasant&amp;ndash;I wasn&amp;rsquo;t interested in even hearing about another programming language that hadn&amp;rsquo;t been widely adopted.&lt;/p&gt;

&lt;p&gt;In the middle of 2014 &lt;a href=&#34;http://nickmanning.net/&#34; target=&#34;_new&#34;&gt;Nick Manning&lt;/a&gt; started the &lt;a href=&#34;http://www.meetup.com/nycgolang/&#34; target=&#34;_new&#34;&gt;Golang NYC meetup group&lt;/a&gt; and I began attending since I already knew him from the &lt;a href=&#34;http://www.meetup.com/nycneo4j/&#34; target=&#34;_new&#34;&gt;NYC Neo4j meetup group&lt;/a&gt;. Hearing the testimonials of Go converts piqued my interest but one meeting in particular made me want to try the language for myself. &lt;a href=&#34;http://www.bjornroche.com/&#34; target=&#34;_new&#34;&gt;Bjorn Roche&lt;/a&gt; gave a presentation about using the &lt;a href=&#34;https://revel.github.io/&#34; target=&#34;_new&#34;&gt;Revel web framework&lt;/a&gt; to power the backend of the mobile app &lt;a href=&#34;https://www.shimmeo.com/&#34; target=&#34;_new&#34;&gt;Shimmeo&lt;/a&gt;. During the presentation he compared Revel to the Java/Scala web framework &lt;a href=&#34;http://www.playframework.com&#34; target=&#34;_new&#34;&gt;Play&lt;/a&gt;. I had a strong interest in Play and was about to use it on my own personal project but after hearing that there was a Go equivalent I was convinced to give Go and Revel a try. Nothing helps you learn a new language better than actually implementing something with it.&lt;/p&gt;

&lt;p&gt;My first step was to learn Go. I&amp;rsquo;m pretty particular with my learning materials and I&amp;rsquo;m just not the type who becomes proficient from online documentation and web searches alone. Finding the right introductory material wasn&amp;rsquo;t easy since there was a dearth of tutorials and well-written, published books on Go. I had found one e-book, whose name I will not mention, but I found its explanation and the progression of material to be deficient. By chance I had stumbled upon one of &lt;a href=&#34;https://www.youtube.com/user/toddmcleod&#34; target=&#34;_new&#34;&gt;Todd Mcleod&amp;rsquo;s&lt;/a&gt; YouTube videos and left a comment. He quickly responded and suggested that I take a look at a new Golang video course that he recently published on &lt;a href=&#34;https://www.udemy.com/learn-how-to-code/learn/v4/content&#34; target=&#34;_new&#34;&gt;Udemy&lt;/a&gt;. I bought access to the videos for a nominal fee and it was the best investment in programming-related material that I have ever made. Simply put, if you have prior computer programming experience there is no way that you couldn&amp;rsquo;t become proficient with Go by the end of the course. While doing the course I had also come across Matt Aimonetti&amp;rsquo;s e-book &lt;a href=&#34;http://www.golangbootcamp.com/book&#34; target=&#34;_new&#34;&gt;Go Bootcamp&lt;/a&gt; and noticed that Todd McLeod&amp;rsquo;s course actually elaborated on many of those examples.&lt;/p&gt;

&lt;p&gt;If you are interested in learning Go and are looking for a tutorial that blends brevity with comprehensiveness then I suggest reading &lt;a href=&#34;http://www.golangbootcamp.com/book&#34; target=&#34;_new&#34;&gt;Go Bootcamp&lt;/a&gt;. If you need greater depth then look at &lt;a href=&#34;https://www.udemy.com/learn-how-to-code/learn/v4/content&#34; target=&#34;_new&#34;&gt;Todd&amp;rsquo;s video course on Udemy&lt;/a&gt;. After tackling the language with these resources I actually found it better to create my own REST API without using a framework. Go is a powerful language that allows you to do just that without a lot of overhead.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Journey Of A Thousand Miles Begins With A Leap</title>
      <link>http://blog.nocdib.com/A-journey-of-a-thousand-miles-begins-with-a-leap/</link>
      <pubDate>Mon, 29 Feb 2016 20:07:14 -0400</pubDate>
      
      <guid>http://blog.nocdib.com/A-journey-of-a-thousand-miles-begins-with-a-leap/</guid>
      <description>&lt;p&gt;It’s been a long time coming (about 6 years) but I’ve finally settled on an idea for a mobile development project to invest my time into. Two years of that time was spent selecting an idea that wasn’t already at least partially implemented, another two years was spent getting acclimated with the tech scene well enough to know which direction to go with it and another two years was was spent dealing with life in general along with general laziness. I&amp;rsquo;ve been gainfully employed for the entire time so it&amp;rsquo;s not as though this project was something that I thought about daily. Now is just the time that I decided to double-down and actually get serious about building something tangible. I have high hopes for my idea so I figured that I will chronicle my progress. If nobody ever reads this it will still be my personal record of the steps I made towards accomplishing something that I&amp;rsquo;ve been dreaming about.&lt;/p&gt;

&lt;p&gt;All posts related to this project will be prefaced with &amp;ldquo;YB.&amp;rdquo; I don&amp;rsquo;t want to mention specifics about what the app will do but I will say that it is mobile-first, socially-based and has heavy emphasis on geolocation. I will be developing the full stack on my own using technologies that I am learning along the way. Hopefully this will become the resource that I wish I found back in the Summer of 2009 to help me get started. If I could minimize the time needed for someone to undertake their own project then I’d be more than satisfied. While I don’t believe in numerology, astrology or any other form of time/numeric-based omens I can’t help but think that today being &lt;a href=&#34;https://en.wikipedia.org/wiki/Leap_year#Leap_day&#34;&gt;Leap Day&lt;/a&gt; is psuedo-symbolic since I’m going forward to embark on this personal quest. Well, here goes nothing.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting Up A Squid Proxy Using Digital Ocean</title>
      <link>http://blog.nocdib.com/Setting-up-a-Squid-proxy-using-Digital-Ocean/</link>
      <pubDate>Sun, 09 Aug 2015 09:17:32 -0400</pubDate>
      
      <guid>http://blog.nocdib.com/Setting-up-a-Squid-proxy-using-Digital-Ocean/</guid>
      <description>&lt;p&gt;With all of the challenges that come with being an American living overseas who has the patience to deal with sites like Google and Wikipedia automatically defaulting to their local versions? Not me. But seriously, I do find it annoying when websites default to their Swedish language versions. I’d also like to be able to watch geographically-specific content such as local American news, Netflix and streaming premium cable programs which aren’t accessible to Internet traffic outside of the United States. I tried using a subscription-based public VPN service but experienced significant lagging while streaming Netflix so I decided that a personal proxy was would be the best option.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.digitalocean.com/&#34; target=&#34;_blank&#34;&gt;Digital Ocean&lt;/a&gt; is a cloud-based hosting services that allows customer to create low-cost, high-performing virtual private servers (VPS) in under a minute. These servers (called droplets) can then be accessed via SSH from any terminal and operate no differently than any local instance of Linux or FreeBSD. Routing my Internet traffic through a U.S.-based server would allow me to use the Internet as if I was in the United States without physically being there. Squid is a proxy server for routing Internet traffic and that is exactly what I need. There are several tutorials on how to configure Squid in various manners but many are for previous versions and not the current version, 3, so I thought I’d share how I got it to work.&lt;/p&gt;

&lt;p&gt;After I created a new droplet based in New York running Ubuntu 14.04 64-bit I installed Squid. All of my set up was done using the root user so I never needed to use the “sudo” command but I’ll include it for those who are not using root.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;nohighlight&#34;&gt;
sudo apt-get install squid
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the installation verify that Squid is running.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;nohighlight&#34;&gt;
initctl list | grep squid3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should get a response like this (but with a different process id):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;nohighlight&#34;&gt;
squid3 start/running, process 3481
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you don’t see it then manually start Squid and check for the running process again:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;nohighlight&#34;&gt;
sudo start squid3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when you verify that Squid is running you should see that it is and the process id associated with it.&lt;/p&gt;

&lt;p&gt;A crucial step in securing the proxy is requiring authentication, a username and password, to access it. I learned this the hard way a few years ago when I set up a proxy without securing it and it was hijacked by spammers to send mass emails in less than 48 hours. First, run the following command to get the necessary package:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;nohighlight&#34;&gt;
apt-get install apache2-utils
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a password file. It’s easiest to create it in same folder as the configuration file. Replace [username] with whatever name you desire.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;nohighlight&#34;&gt;
htpasswd -c /etc/squid3/passwd [username]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When prompted to, enter your desired password. Then run this command to find the path to the authentication program. Copy this path because you will need it in the next step. You may get more than one result but select the path to an application and not any other type of file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;nohighlight&#34;&gt;
dpkg -L squid3 | grep ncsa_auth
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open the configuration file &lt;b&gt;/etc/squid3/squid.conf&lt;/b&gt; and add the following near the top of the file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;nohighlight&#34;&gt;
auth_param basic program [path from previous step] /etc/squid3/passwd
auth_param basic children 5
auth_param basic realm [title for the login window]
auth_param basic credentialsttl 2 hours
auth_param basic casesensitive off
acl ncsa_users proxy_auth REQUIRED
http_access allow ncsa_users
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In a nutshell, those lines tell Squid where to find the valid username/password list and that both values are case-insensitve. Then create a user group where authentication is required and only allow users in that group to access the proxy.&lt;/p&gt;

&lt;p&gt;Somewhere in the file should be a line that looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;nohighlight&#34;&gt;
http_port [port_number]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Usually the port number is 3128. You can change this value if you desire but remember it since you will be referencing it.&lt;/p&gt;

&lt;p&gt;These next configuration options are optional so you can use whatever you desire and skip the steps you do not need since your configuration desires may be different than mine.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;**** START OPTIONAL SECTION ****&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;What I needed from my proxy was for it not to cache, not to show my computer’s IP as the true origin and for all traffic to go through the proxy and not directly to me. The following lines do those things, respectively, and are at the end of the file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;nohighlight&#34;&gt;
cache deny all
request_header_access Allow allow all
request_header_access Authorization allow all
request_header_access WWW-Authenticate allow all
request_header_access Proxy-Authorization allow all
request_header_access Proxy-Authenticate allow all
request_header_access Cache-Control allow all
request_header_access Content-Encoding allow all
request_header_access Content-Length allow all
request_header_access Content-Type allow all
request_header_access Date allow all
request_header_access Expires allow all
request_header_access Host allow all
request_header_access If-Modified-Since allow all
request_header_access Last-Modified allow all
request_header_access Location allow all
request_header_access Pragma allow all
request_header_access Accept allow all
request_header_access Accept-Charset allow all
request_header_access Accept-Encoding allow all
request_header_access Accept-Language allow all
request_header_access Content-Language allow all
request_header_access Mime-Version allow all
request_header_access Retry-After allow all
request_header_access Title allow all
request_header_access Connection allow all
request_header_access Cookie allow all
request_header_access Proxy-Connection allow all
request_header_access User-Agent allow all
request_header_access All deny all
forwarded_for off
always_direct deny all
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;b&gt;**** END OPTIONAL SECTION ****&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;With all of the options in place you can test that your proxy works. Save the configuration file and apply the changes to Squid with this command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;nohighlight&#34;&gt;
squid3 -k reconfigure
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change the proxy settings in your browser so that all connections are routed through the public IP of your droplet using the port number that you specified in the configuration file. Everything should work as expected. If you have any questions/issues then feel free to reach me in the comments.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>